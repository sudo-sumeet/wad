*****Question 1*****

pwd: print name of current/working directory

top: display Linux programmes

less: opposite of more :P .Less is a program similar to more, but it has many  more  features.
       Less  does  not  have to read the entire input file before starting, so
       with large input files it starts up faster than text  editors  like  vi. 
       Less uses termcap (or terminfo on some systems), so it can run on
       a variety of terminals.  There is even  limited  support  for  hardcopy
       terminals.
       
man: an interface to the on-line reference manuals. 'man' is the manual pager of the system.

cat: concatenate files and print on the standard output

chmod: change file mode bits. chmod changes the permissions of each
	     given file according to mode, where mode describes the permissions to
	     modify. Mode can be specified with octal numbers or with letters.
       
*****Question 2*****

chmod a+x modifies the argument's mode while chmod 755 sets it.
chmod a+x will add the exec bits to the file but will not touch other bits. 
For example file might be still unreadable to others and group.
chmod 755 will always make the file with perms 755 no matter what initial permissions were.
On the other hand, chmod +x changes file permissions to executable.

*****Question 3*****

A Read–Eval–Print Loop (REPL), also known as an interactive toplevel or language shell, is a simple, interactive computer programming environment that takes single user inputs (i.e. single expressions), evaluates them, and returns the result to the user; a program written in a REPL environment is executed piecewise. 
The term is most usually used to refer to programming interfaces similar to the classic Lisp machine interactive environment.
Common examples include command line shells and similar environments for programming languages, and is particularly characteristic of scripting languages.

*****Question 4*****

Iterators are nothing but methods supported by collections. 
Objects that store a group of data members are called collections.
In Ruby, arrays and hashes can be termed collections.
Iterators return all the elements of a collection, one after the other. 
Ruby has two iterators, each and collect.

Ruby each Iterator:

The each iterator returns all the elements of an array or a hash.
Syntax:

collection.each do |variable|
   code
end

Executes code for each element in collection. Here, collection could be an array or a ruby hash.
Example:

#!/usr/bin/ruby

ary = [1,2,3,4,5]
ary.each do |i|
   puts i
end

This will produce the following result:

1
2
3
4
5

You always associate the each iterator with a block. 
It returns each value of the array, one by one, to the block. 
The value is stored in the variable i and then displayed on the screen.

Ruby collect Iterator:

The collect iterator returns all the elements of a collection.
Syntax:

collection = collection.collect

The collect method need not always be associated with a block. 
The collect method returns the entire collection, regardless of whether it is an array or a hash.
Example:

#!/usr/bin/ruby

a = [1,2,3,4,5]
b = Array.new
b = a.collect{ |e| e }
puts b

This will produce the following result:

1
2
3
4
5


*****Question 5*****

Overloading programme :
	class Tester1
	 def initialize x
	   @x = x
	 end
	 def +(y)
	   @x.to_s + y.to_s
	 end
	end
	a = Tester1.new 11.to_s
	puts(a+22)

Output:
	sumeet@Sumeet-Notebook:~$ cd Desktop
	sumeet@Sumeet-Notebook:~/Desktop$ ruby asd.rb
	1122
	

